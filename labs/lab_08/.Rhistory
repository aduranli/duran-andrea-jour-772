group_by(year) |>
summarise(
count_year=n()
)
# Display results of code below this codeblock
view(dc_girls_gays_and_theys)
view(marvel_girls_gays_and_theys)
View(clean_marvel)
clean_marvel |>
group_by(id) |>
summarise(count = n())
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidycensus)
library(lubridate)
library(ggthemes)
library(dplyr)
prince_georges_2022_overdoses <- read_csv("data/prince_georges_2022_overdoses.csv") |>
mutate(datetime = ymd_hms(datetime),
week = week(datetime),
month = month(datetime, label = TRUE, abbr = TRUE),
date = date(datetime))
glimpse(prince_georges_2022_overdoses)
months_percentage_total_calls <- prince_georges_2022_overdoses |>
filter(!is.na(month)) |>
group_by(month) |>
summarise(count = n()) |>
rename(calls = count) |>
mutate(percent = (calls/sum(calls)*100)) |>
arrange(desc(percent))
months_percentage_total_calls |>
ggplot() +
geom_bar(aes(x=month, weight=calls)) +
#theme_economist() +
labs(
title="Total 911 Overdose Calls",
x = "month",
y = "total calls",
caption = "source: Prince George's County")
months_percentage_total_calls |>
ggplot() +
geom_bar(aes(x=reorder(month,calls), weight=calls))
months_percentage_total_calls |>
ggplot() +
geom_bar(aes(x=reorder(month,calls), weight=calls)) +
theme_economist() +
labs(
title="Total 911 Overdose Calls",
x = "month",
y = "total calls",
caption = "source: Prince George's County")
dc_alignment
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(janitor)
library(readr)
library(refinr)
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
dc_data <- read_csv("data/dc-wikia-data.csv")
marvel_data <- read_csv("data/marvel-wikia-data.csv")
dc_womenincomics2014_comparedto2013 <- read_csv("data/DC 2014 Women In Comics Stats.csv")
marvel_womenincomics2014_comparedto2013 <- read_csv("data/MARVEL 2014 Women In Comics Stats.csv")
dc_womenincomics2014_month <- read_csv("data/MONTH DC Women In Comics 2014.csv")
marvel_womenincomics2014_month <- read_csv("data/MONTH MARVEL Women In Comics 2014.csv")
# Clean required data and prepare for analysis if needed.
clean_dc <- clean_names(dc_data)
clean_marvel <- clean_names(marvel_data)
# Put code to reverse engineer sentence here
dc_gender <- clean_dc |>
filter(!is.na(sex), appearances >= 1) |>
group_by(sex) |>
summarise(
count=n()) |>
arrange(desc(count)) |>
mutate(percentage = (count/sum(count)*100))
marvel_gender <- clean_marvel |>
filter(!is.na(sex), appearances >= 1) |>
group_by(sex) |>
summarise(
count=n()) |>
arrange(desc(count)) |>
mutate(percentage = (count/sum(count)*100))
# Display results of code below this codeblock
view(dc_gender)
view(marvel_gender)
# Put code to reverse engineer sentence here
dc_LGBT <- clean_dc |>
filter(!is.na(gsm))
dc_girls_gays_and_theys <- dc_LGBT |>
group_by(year) |>
summarise(
count_year=n()
)
marvel_LGBT <- clean_marvel |>
filter(!is.na(gsm))
marvel_girls_gays_and_theys <- marvel_LGBT |>
group_by(year) |>
summarise(
count_year=n()
)
# Display results of code below this codeblock
view(dc_girls_gays_and_theys)
view(marvel_girls_gays_and_theys)
# Put code to reverse engineer sentence here
#Who are the people with no ID?
no_id <- clean_dc |>
filter(is.na(id))
no_id
# They are more side characters than heroes. We can likely exclude them from the code to get to the author's main findings
# Here we're looking for the secret identity split up in DC Comics
dc_secret_identity <- clean_dc |>
filter(!is.na(sex),
(!is.na(id))) |>
group_by(sex, id) |>
summarise(count=n()) |>
mutate(percentage = (count/sum(count)*100)) |>
arrange(desc(count))
# Now for Marvel
marvel_secret_identity <- clean_marvel |>
filter(!is.na(id),
(!is.na(id))) |>
group_by(sex, id) |>
summarise(count=n()) |>
mutate(percentage = (count/sum(count)*100)) |>
arrange(desc(count))
clean_marvel |>
group_by(id) |>
summarise(count = n())
#count it w/o known to authorities, with public, with secret identity
# Display results of code below this codeblock
view(dc_secret_identity)
view(marvel_secret_identity)
# Put code to reverse engineer sentence here
DC_10_appearances <- clean_dc |>
filter(!is.na(sex), appearances >= 10) |>
group_by(sex) |>
summarise(count = n()) |>
mutate(percentage = (count/sum(count)*100)) |>
arrange(desc(count))
DC_10_appearances
marvel_10_appearances <- clean_marvel |>
filter(!is.na(sex), appearances >= 10) |>
group_by(sex) |>
summarise(count = n()) |>
mutate(percentage = (count/sum(count)*100)) |>
arrange(desc(count))
marvel_10_appearances
# Display results of code below this codeblock
dc_alignment
dc_alignment
# Put code to reverse engineer sentence here
dc_alignment <- clean_dc |>
filter(appearances >= 1) |>
group_by(sex, align) |>
filter(!is.na(sex) & !is.na(align)) |>
summarise(
count=n()) |>
arrange(desc(count)) |>
mutate(percentage = (count/sum(count)*100))
dc_alignment
marvel_alignment <- clean_marvel |>
filter(appearances >= 1) |>
group_by(sex, align) |>
filter(!is.na(sex) & !is.na(align)) |>
summarise(
count=n()) |>
arrange(desc(count)) |>
mutate(percentage = (count/sum(count)*100))
marvel_alignment
dc_alignment
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(dplyr)
library(janitor)
library(readr)
library(refinr)
# Load required data
# Path to data should be loaded from folder "data" i.e. read_csv("data/name_of_data.csv")
dc_data <- read_csv("data/dc-wikia-data.csv")
marvel_data <- read_csv("data/marvel-wikia-data.csv")
# Clean required data and prepare for analysis if needed.
clean_dc <- clean_names(dc_data)
clean_marvel <- clean_names(marvel_data)
# Put code to reverse engineer sentence here
#DC code
dc_gender <- clean_dc |>
filter(!is.na(sex), appearances >= 1) |>
group_by(sex) |>
summarise(
count=n()) |>
arrange(desc(count)) |>
mutate(percentage = (count/sum(count)*100))
#Marvel code
marvel_gender <- clean_marvel |>
filter(!is.na(sex), appearances >= 1) |>
group_by(sex) |>
summarise(
count=n()) |>
arrange(desc(count)) |>
mutate(percentage = (count/sum(count)*100))
view(dc_gender)
view(marvel_gender)
# Put code to reverse engineer sentence here
#DC code
dc_LGBT <- clean_dc |>
filter(!is.na(gsm))
dc_girls_gays_and_theys <- dc_LGBT |>
group_by(year) |>
summarise(
count_year=n()
)
# Marvel code
marvel_LGBT <- clean_marvel |>
filter(!is.na(gsm))
marvel_girls_gays_and_theys <- marvel_LGBT |>
group_by(year) |>
summarise(
count_year=n()
)
view(dc_girls_gays_and_theys)
view(marvel_girls_gays_and_theys)
View(dc_secret_identity)
View(clean_dc)
View(clean_marvel)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidycensus)
library(lubridate)
library(ggthemes)
library(dplyr)
prince_georges_2022_overdoses <- read_csv("data/prince_georges_2022_overdoses.csv") |>
mutate(datetime = ymd_hms(datetime),
week = week(datetime),
month = month(datetime, label = TRUE, abbr = TRUE),
date = date(datetime))
glimpse(prince_georges_2022_overdoses)
months_percentage_total_calls <- prince_georges_2022_overdoses |>
filter(!is.na(month)) |>
group_by(month) |>
summarise(count = n()) |>
rename(calls = count) |>
mutate(percent = (calls/sum(calls)*100)) |>
arrange(desc(percent))
months_percentage_total_calls |>
ggplot() +
geom_bar(aes(x=reorder(month,calls), weight=calls)) +
theme_economist() +
labs(
title="Total 911 Overdose Calls",
x = "month",
y = "total calls",
caption = "source: Prince George's County")
weekly_percentage_callsPG <- prince_georges_2022_overdoses |>
filter(!is.na(week)) |>
group_by(week) |>
summarise(count = n()) |>
rename(calls = count) |>
mutate(percent = (calls/sum(calls)*100)) |>
arrange(desc(percent))
View(weekly_percentage_callsPG)
weekly_percentage_callsPG <- prince_georges_2022_overdoses |>
filter(!is.na(week)) |>
group_by(week) |>
summarise(count = n()) |>
rename(calls = count)
weekly_percentage_callsPG |>
ggplot() +
geom_line(aes(x=date, y=total_calls))
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(tidycensus)
library(lubridate)
library(ggthemes)
library(dplyr)
prince_georges_2022_overdoses <- read_csv("data/prince_georges_2022_overdoses.csv") |>
mutate(datetime = ymd_hms(datetime),
week = week(datetime),
month = month(datetime, label = TRUE, abbr = TRUE),
date = date(datetime))
glimpse(prince_georges_2022_overdoses)
months_percentage_total_calls <- prince_georges_2022_overdoses |>
filter(!is.na(month)) |>
group_by(month) |>
summarise(count = n()) |>
rename(calls = count) |>
mutate(percent = (calls/sum(calls)*100)) |>
arrange(desc(percent))
months_percentage_total_calls |>
ggplot() +
geom_bar(aes(x=reorder(month,calls), weight=calls)) +
theme_economist() +
labs(
title="Total 911 Overdose Calls",
x = "month",
y = "total calls",
caption = "source: Prince George's County")
weekly_percentage_callsPG |>
ggplot() +
geom_line(aes(x=date, y=total_calls))
weekly_percentage_callsPG |>
ggplot() +
geom_line(aes(x=date, y=calls))
weekly_percentage_callsPG |>
ggplot() +
geom_line(aes(x=week, y=calls))
weekly_percentage_callsPG |>
ggplot() +
geom_line(aes(x=week, y=calls)) |>
theme_economist() +
labs(
title="Total 911 Overdose Calls",
x = "week",
y = "total calls",
caption = "source: Prince George's County")
weekly_percentage_callsPG |>
ggplot() +
geom_line(aes(x=week, y=calls)) +
theme_economist() +
labs(
title="Total 911 Overdose Calls",
x = "week",
y = "total calls",
caption = "source: Prince George's County")
baltco_911_calls_by_date |>
ggplot() +
geom_line(aes(x=date, y=total_calls)) +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(lubridate)
baltco_911_calls <- read_csv("data/baltco_911_calls.csv")
baltco_911_calls_by_month <- baltco_911_calls |>
mutate(month = month(date, label=TRUE)) |>
group_by(month) |>
summarize(total_calls = n()) |>
arrange(desc(total_calls))
baltco_911_calls_by_month
baltco_911_calls_by_month |>
ggplot()
baltco_911_calls_by_month |>
ggplot() +
geom_bar(aes(x=month, weight=total_calls))
baltco_911_calls_by_month |>
ggplot() +
geom_bar(aes(x=reorder(month,total_calls), weight=total_calls))
baltco_911_calls_by_month |>
ggplot() +
geom_bar(aes(x=reorder(month,total_calls), weight=total_calls)) +
coord_flip()
baltco_911_calls_by_month |>
ggplot() +
geom_bar(aes(x=reorder(month,total_calls), weight=total_calls)) +
coord_flip() +
theme_minimal()
install.packages('ggthemes')
library(ggthemes)
baltco_911_calls_by_month |>
ggplot() +
geom_bar(aes(x=reorder(month,total_calls), weight=total_calls)) +
coord_flip() +
theme_economist()
baltco_911_calls_by_month |>
ggplot() +
geom_bar(aes(x=reorder(month,total_calls), weight=total_calls)) +
coord_flip() +
theme_economist() +
labs(
title="More 911 Overdose Calls in Warmer Months",
x = "month",
y = "total calls",
caption = "source: Baltimore County"
)
baltco_911_calls_by_date <- baltco_911_calls |>
group_by(date) |>
summarise(
total_calls=n()
)
baltco_911_calls_by_date
baltco_911_calls_by_date |>
ggplot() +
geom_line(aes(x=date, y=total_calls))
baltco_911_calls_by_date |>
ggplot() +
geom_line(aes(x=date, y=total_calls)) +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d")
weekly_percentage_callsPG |>
ggplot() +
geom_line(aes(x=week, y=calls)) +
scale_x_date(date_breaks = "1 week", date_labels = "%b %d") +
theme_economist() +
labs(
title="Total 911 Overdose Calls",
x = "week",
y = "total calls",
caption = "source: Prince George's County")
weekly_percentage_callsPG |>
ggplot() +
geom_line(aes(x=week, y=calls)) +
theme_economist() +
labs(
title="Total 911 Overdose Calls",
x = "week",
y = "total calls",
caption = "source: Prince George's County")
knitr::include_graphics("https://www.mathsisfun.com/data/images/scatter-ice-cream1.svg")
View(prince_georges_2022_overdoses)
calls_per_zip <- prince_georges_2022_overdoses |>
group_by(zipcode) |>
summarise(count = n())
View(calls_per_zip)
group_by(zipcode) |>
summarise(count = n())
calls_per_zip <- prince_georges_2022_overdoses |>
filter(!zipcode = 0) |>
calls_per_zip <- prince_georges_2022_overdoses |>
filter(!zipcode = "0") |>
calls_per_zip <- prince_georges_2022_overdoses |>
filter(zipcode!="0") |>
group_by(zipcode) |>
summarise(count = n())
census_api_key()
knitr::opts_chunk$set(echo = TRUE)
install=TRUE
census_api_key("5ee008c8b3892329420bc0b61f251ab267bc9e3f")
census_api_key(install = TRUE)
median_income_MD <- get_acs(geography="zcta",
variables = c(medincome = "B19013_001"),
state = "MD",
year = 2021)
median_income_MD <- get_acs(geography="zcta",
variables = c(medincome = "B19013_001"),
state = "MD",
year = 2019)
View(median_income_MD)
View(calls_per_zip)
income_and_calls_by_zip <- median_income_MD |>
inner_join(calls_per_zip)
income_and_calls_by_zip <- median_income_MD |>
inner_join(calls_per_zip, by=c("GEOID", "zipcode"))
income_and_calls_by_zip <- median_income_MD |>
inner_join(calls_per_zip, by=c("zipcode", "GEOID"))
income_and_calls_by_zip <- median_income_MD |>
left_join(calls_per_zip, by=c("zipcode", "GEOID"))
income_and_calls_by_zip <- median_income_MD |>
left_join(calls_per_zip, by=c("GEOID", "zipcode"))
glimpse(calls_per_zip)
glimpse(median_income_MD)
income_and_calls_by_zip <- median_income_MD |>
left_join(calls_per_zip, by=c("GEOID", "zipcode"))
income_and_calls_by_zip <- median_income_MD |>
right_join(calls_per_zip, by=c("GEOID", "zipcode"))
income_and_calls_by_zip <- median_income_MD |>
left_join(calls_per_zip, by=c("zipcode"="GEOID"))
income_and_calls_by_zip <- median_income_MD |>
left_join(calls_per_zip, by=c("GEOID"="zipcode"))
View(income_and_calls_by_zip)
View(calls_per_zip)
left_join(median_income_MD, by=c("GEOID"="zipcode"))
left_join(median_income_MD, by=c("zipcode"="GEOID"))
income_and_calls_by_zip <-  |> calls_per_zip |>
income_and_calls_by_zip <-  calls_per_zip |>
left_join(median_income_MD, by=c("zipcode"="GEOID"))
View(income_and_calls_by_zip)
library(ggplot2)
ggplot(income_and_calls_by_zip, aes(x = x, y = y)) +
geom_point(color = "blue", size = 3)
ggplot(income_and_calls_by_zip, aes(x = zipcode, y = income))
ggplot(income_and_calls_by_zip, aes(x = x, y = y))
ggplot(income_and_calls_by_zip, aes("zipcode" = x, "estimate" = y)) +
geom_point(color = "blue", size = 3) +
labs(title = "Calls by Income and Zipcode", x = "Zipcode", y = "Income")
ggplot(income_and_calls_by_zip, aes(x = "zipcode", y = "estimate")) +
geom_point(color = "blue", size = 3) +
labs(title = "Calls by Income and Zipcode", x = "Zipcode", y = "Income")
ggplot(income_and_calls_by_zip, aes(x = x, y = y)) +
geom_point(color = "blue", size = 3) +
labs(title = "Calls by Income and Zipcode", x = "Zipcode", y = "Income")
ggplot(income_and_calls_by_zip, aes(x = "zipcode", y = "estimate")) +
geom_point(color = "blue", size = 3) +
labs(title = "Calls by Income and Zipcode", x = "Zipcode", y = "Income") +
geom_text(check_overlap = TRUE)
ggplot(income_and_calls_by_zip, aes(zipcode, estimate, label = zipcode(income_and_calls_by_zip)))
ggplot(income_and_calls_by_zip, aes("zipcode", "estimate", label = "zipcode"(income_and_calls_by_zip)))
ggplot(income_and_calls_by_zip, aes(x = "zipcode", y = "estimate")) +
geom_point(color = "blue", size = 3) +
labs(title = "Calls by Income and Zipcode", x = "Zipcode", y = "Income") +
geom_text(check_overlap = TRUE)
ggplot(income_and_calls_by_zip, aes(x = zipcode, y = estimate)) +
geom_point(color = "blue", size = 3) +
labs(title = "Calls by Income and Zipcode", x = "Zipcode", y = "Income") +
geom_text(aes(label = zipcode), check_overlap = TRUE)
ggplot(income_and_calls_by_zip, aes(x = count, y = estimate)) +
geom_point(color = "blue", size = 3) +
labs(title = "Calls by Income and Zipcode", x = "Calls", y = "Income") +
geom_text(aes(label = zipcode), check_overlap = TRUE)
ggplot(income_and_calls_by_zip, aes(x = count, y = estimate)) +
geom_point(color = "blue", size = 3) +
labs(title = "Number of Calls by Income and Zipcode", x = "Calls", y = "Income") +
geom_text(aes(label = zipcode), check_overlap = TRUE)
ggplot(income_and_calls_by_zip, aes(x = estimate, y = count)) +
geom_point(color = "blue", size = 3) +
labs(title = "Number of Calls by Income and Zipcode", x = "Income", y = "Calls") +
geom_text(aes(label = zipcode), check_overlap = TRUE)
income_and_calls_by_zip <-  calls_per_zip |>
left_join(median_income_MD, by=c("zipcode"="GEOID")) |>
mutate(max=(estimate+moe))
ggplot(income_and_calls_by_zip, aes(x = max, y = count)) +
geom_point(color = "blue", size = 3) +
labs(title = "Number of Calls by Income and Zipcode", x = "Income", y = "Calls") +
geom_text(aes(label = zipcode), check_overlap = TRUE)
